/* Creation of User Table */

drop database wealthManagement;
create database wealthManagement;
use wealthManagement;

DROP TABLE IF EXISTS USER;
CREATE TABLE USER
(USER_ID INT NOT NULL AUTO_INCREMENT,
FIRST_NAME VARCHAR(50),
LAST_NAME VARCHAR(50),
EMAIL_ID VARCHAR(50),
CONTACT VARCHAR(12),
PRIMARY KEY (USER_ID));

/* Creation of Bank_Asset Table */

DROP TABLE IF EXISTS BANK_ASSET;
CREATE TABLE BANK_ASSET
(USER_ID INT NOT NULL,
ACCOUNT_NO VARCHAR(20) NOT NULL,
TYPE VARCHAR(20),
BRANCH VARCHAR(20),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(ACCOUNT_NO),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Insurance_Asset Table */

DROP TABLE IF EXISTS INSURANCE_ASSET;
CREATE TABLE INSURANCE_ASSET
(POLICY_NO VARCHAR(20) NOT NULL,
USER_ID INT NOT NULL,
POLICY_NAME VARCHAR(20),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(POLICY_NO),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of 401k_Asset Table */

DROP TABLE IF EXISTS 401K_ASSET;
CREATE TABLE 401K_ASSET
(ACCOUNT_NO INT NOT NULL,
USER_ID INT NOT NULL,
AMOUNT DECIMAL(25,2),
PRIMARY KEY(ACCOUNT_NO),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Stocks_Asset Table */

DROP TABLE IF EXISTS STOCK_ASSET;
CREATE TABLE STOCK_ASSET
(STOCK_ID INT NOT NULL ,
USER_ID INT NOT NULL,
COMPANY_NAME VARCHAR(20),
QUANTITY INTEGER,
AMOUNT DECIMAL(25,2),
PRIMARY KEY(STOCK_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Immovable_movable_asset Table */

DROP TABLE IF EXISTS IMMOVABLE_MOVABLE_ASSET;
CREATE TABLE IMMOVABLE_MOVABLE_ASSET
(ASSET_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
TYPE VARCHAR(20),
LOCATION VARCHAR(20),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(ASSET_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Mortgage Table */

DROP TABLE IF EXISTS MORTGAGE;
CREATE TABLE MORTGAGE
(MORTGAGE_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
AMOUNT DECIMAL(25,2),
PRIMARY KEY(MORTGAGE_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Loan Table */

DROP TABLE IF EXISTS LOAN;
CREATE TABLE LOAN
(LOAN_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
TYPE VARCHAR(25),
LOAN_PROVIDER VARCHAR(25),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(LOAN_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of CREDIT_CARD Table */

DROP TABLE IF EXISTS CREDIT_CARD;
CREATE TABLE CREDIT_CARD
(CREDIT_CARD_NO INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
COMPANY VARCHAR(25),
DATE DATE,
AMOUNT DECIMAL(25,2),
PRIMARY KEY(CREDIT_CARD_NO),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Taxes_Bills Table */

DROP TABLE IF EXISTS TAXES_BILLS;
CREATE TABLE TAXES_BILLS
(TAX_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
TYPE VARCHAR(25),
DATE DATE,
AMOUNT_PER_YEAR DECIMAL(25,2),
PRIMARY KEY(TAX_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Income Table */

DROP TABLE IF EXISTS INCOME;
CREATE TABLE INCOME
(INCOME_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
DATE DATE,
SOURCE VARCHAR(20),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(INCOME_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Creation of Expense Table */

DROP TABLE IF EXISTS EXPENSE;
CREATE TABLE EXPENSE
(EXPENSE_ID INT NOT NULL AUTO_INCREMENT,
USER_ID INT NOT NULL,
DATE DATE,
PAYEE VARCHAR(25),
AMOUNT DECIMAL(25,2),
PRIMARY KEY(EXPENSE_ID),
FOREIGN KEY(USER_ID) REFERENCES USER (USER_ID));

/* Populating the Tables with Data*/

/* Data for the users table */
INSERT INTO USER ( FIRST_NAME, LAST_NAME, EMAIL_ID, CONTACT)
VALUES
("Supriya","Suresh","supriya.padmapriyasuresh@utdallas.edu","9001002000"),
("Teffy","George","teffyannie.george@utdallas.edu","2001009988"),
("Rajesh","Bhattacharjee","rxb210045@utdallas.edu","9001002233"),
("Rahul","Mukherjee","Rahul.Mukherjee@utdallas.edu","2001004455"),
("Raghav","Pulipati","Raghavendra.Pulipati@UTDallas.edu","5006007788");

/* Data for the mortgage table */
INSERT INTO MORTGAGE ( USER_ID, AMOUNT)
VALUES
( '1', '100000'),
( '1', '30000'),
( '2', '40000'),
( '2', '145000'),
( '3', '166000'),
( '3', '178000'),
( '4', '156000'),
( '4', '239000'),
( '5', '300000');

/* Data for the expense table */
INSERT INTO EXPENSE ( USER_ID, DATE, PAYEE)
VALUES
( '2', '2022-03-04', 'ABC Utilities'),
( '1', '2022-03-14', 'Amazon'),
( '2', '2021-02-13', 'Frontier'),
( '4', '2021-10-14', 'T Mobile'),
( '4', '2021-12-04', 'Sunoco'),
( '5', '2021-09-22', 'Sunoco'),
( '3', '2021-06-14', 'Pep Boys'),
( '5', '2021-11-30', 'Diners'),
('3', '2021-06-24', 'Jc Penny'),
('5', '2021-07-23', 'XYZ Realtors');

/* Data for the 401k asset table */
INSERT INTO 401K_ASSET (ACCOUNT_NO, USER_ID, AMOUNT)
VALUES
('8783372', '1', '89000'),
('5534535', '2', '33400'),
('2383372', '2', '45600'),
('633545', '3', '77000'),
('678323', '3', '8800'),
('4583372', '4', '5600'),
('348332', '4', '60660'),
('979678', '5', '6078'),
('544545', '5', '60443'),
('66556', '1', '45667');

/* Data for the bank asset table */
INSERT INTO BANK_ASSET (USER_ID, ACCOUNT_NO, TYPE, BRANCH, AMOUNT)
VALUES
('3', '44453857', 'Savings', 'Boston', '104350'),
('4', '54553857', 'Checking', 'Dallas', '145400'),
('4', '3236879', 'Bond', 'Dallas', '456845'),
('3', '90053857', 'GI Bond', 'Dallas', '345600'),
('2', '323898976', 'FD', 'Dallas', '456573'),
('5', '454553857', 'Savings', 'Florida', '468460'),
('5', '87776857', 'FD', 'Cherry Hill', '445458');

/* Data for the credit card table */
INSERT INTO CREDIT_CARD (CREDIT_CARD_NO, USER_ID, COMPANY, DATE, AMOUNT)
VALUES
('98535345', '2', 'CHASE', '2022-04-03', '32452'),
('345535345', '1', 'BOA', '2022-04-03', '4324'),
('4876856', '3', 'Discover', '2021-08-03', '150'),
('435466778', '4', 'AMEX', '2021-01-22', '44441'),
('98335345', '5', 'CHASE', '2021-05-12', '34544'),
('98835345', '5', 'BOA', '2021-04-27', '662323');

/* Data for the immovable movable table */
INSERT INTO IMMOVABLE_MOVABLE_ASSET ( USER_ID, TYPE, LOCATION, AMOUNT)
VALUES
('1', 'CONDO', 'NEW YORK', '54645'),
('2', 'CONDO', 'NEW YORK', '654654'),
('2', 'BUNGLOW', 'MIAMI', '13235'),
('3', 'CONDO', 'NEW YORK', '845621'),
('4', 'HOUSE', 'LA', '654684'),
('5', 'CONDO', 'NEW YORK', '45454'),
('5', 'CONDO', 'DALLAS', '455');

/* Data for the insurance asset table */
INSERT INTO INSURANCE_ASSET (POLICY_NO, USER_ID, POLICY_NAME, AMOUNT)
VALUES
('87538458', '1', 'HL LIFE INSURANCE', '5000000'),
('87569458', '1', 'FY HEALTH INSURANCE', '1000000'),
('87538455', '1', 'FY CAR INSURANCE', '70000'),
('57539958', '2', 'FY LIFE INSURANCE', '100000'),
('97547458', '2', 'HL HEALTH INSURANCE', '2000000'),
('67578455', '2', 'LF CAR INSURANCE', '80000'),
('87838458', '3', 'LF LIFE INSURANCE', '1000000'),
('87569424', '3', 'FY HEALTH INSURANCE', '400000'),
('87538620', '5', 'HL CAR INSURANCE', '70000'),
('79909958', '5', 'FY LIFE INSURANCE', '1000000'),
('97507458', '4', 'HL HEALTH INSURANCE', '2500000'),
('60578455', '4', 'LF CAR INSURANCE', '90000');

/* Data for the stock asset table */
INSERT INTO STOCK_ASSET (STOCK_ID, USER_ID, COMPANY_NAME, QUANTITY, AMOUNT)
VALUES
('262540801',1,'Metro Cash&Carry',26,3217.57),
('056710677',4,'It Smart Group',9,4268.77),
('253178563',4,'Facebook',25,3890.68),
('263855232',4,'ExxonMobil',5,3111.44),
('734211757',1,'Mars',36,4716.36),
('261620414',1,'Demaco',12,2543.94),
('233621784',2,'Erickson',32,4472.70),
('712758157',1,'ExxonMobil',28,4884.70),
('836857337',1,'ENEL',37,2591.29),
('273516238',3,'Demaco',30,4128.69),
('537611005',2,'Comodo',2,1688.42),
('213837286',1,'Comcast',10,2054.61),
('403005741',3,'Leadertech',19,1355.22),
('185137062',3,'Vodafone',0,2125.64),
('562063550',1,'Coca-Cola Company',33,3074.85),
('863040764',2,'ExxonMobil',26,2967.77),
('667021743',3,'Telekom',42,3177.56),
('850621652',1,'ENEL',18,4142.93),
('102177832',1,'ENEL',22,96.50),
('273632681',1,'Global Print',21,104.09),
('355728222',2,'Comodo',40,3277.60),
('302712247',4,'CarMax',28,858.28),
('718377863',3,'Danone',6,1188.97),
('475551516',2,'Global Print',38,3901.91),
('678668404',3,'Coca-Cola Company',41,3183.67),
('566002880',2,'CarMax',0,3408.75),
('430000856',2,'Metro Cash&Carry',12,2542.41),
('285648487',2,'Mars',22,4761.70),
('646626504',4,'ExxonMobil',29,3460.00),
('025674607',1,'UPC',37,1361.57);

/* Data for the loan table */
INSERT INTO LOAN ( USER_ID, TYPE, LOAN_PROVIDER, AMOUNT)
VALUES
('1', 'HOME LOAN', 'SANTANDER', 59900),
('2', 'CAR LOAN', 'SD LOANS', 75900),
('3', 'EDUCATION LOAN', 'BOA', 200900),
('3', 'CAR LOAN', 'CHASE', 7900),
('4', 'HOME LOAN', 'BOA', 100000),
('5', 'EDUCATION LOAN', 'BOA', 50000);

/* Data for the taxes bills table */
INSERT INTO TAXES_BILLS ( USER_ID, TYPE, DATE, AMOUNT_PER_YEAR)
VALUES
('1', 'FEDERAL', '2022-01-01', '69999'),
('2', 'FEDERAL', '2022-06-01', '75999'),
('3', 'FEDERAL', '2021-12-01', '69599'),
('4', 'FEDERAL', '2020-01-01', '109999'),
('5', 'FEDERAL', '2020-05-01', '80999');

/* Data for the income table */
INSERT INTO INCOME ( USER_ID, DATE, SOURCE, AMOUNT)
VALUES
('1', '2020-01-01', 'BOND', '40000'),
('2', '2021-01-01', 'REAL ESTATE', '5000000'),
('3', '2022-04-24', 'BUSINESS', '200000'),
('4', '2022-06-07', 'SALARY', '20000'),
('5', '2022-01-01', 'BOND', '45000');


/* SQL QUERIES     */

/* 1.	Displaying the user’s total value of assets – this can change dynamically with the changing  */

SELECT SUM(AMOUNT) AS ASSET_WORTH
FROM (SELECT USER_ID, AMOUNT FROM BANK_ASSET UNION ALL
SELECT USER_ID, AMOUNT FROM INSURANCE_ASSET UNION ALL
SELECT USER_ID, AMOUNT FROM 401K_ASSET UNION ALL
SELECT USER_ID, AMOUNT FROM STOCK_ASSET UNION ALL
SELECT USER_ID, AMOUNT FROM IMMOVABLE_MOVABLE_ASSET) AS ASSET_TABLE
WHERE USER_ID = 1001;


/* 2.	Displaying a detailed view of all the user’s assets and more information about them */

SELECT * FROM (SELECT 
BANK_ASSET.USER_ID, BANK_ASSET.ACCOUNT_NO, BANK_ASSET.BRANCH, BANK_ASSET.AMOUNT AS BANK_AMOUNT,
INSURANCE_ASSET.POLICY_NO, INSURANCE_ASSET.POLICY_NAME, INSURANCE_ASSET.AMOUNT AS INSURANCE_AMOUNT,
401K_ASSET.ACCOUNT_NO AS 401K_ACCOUNT_NO, 401K_ASSET.AMOUNT AS 401K_AMOUNT,
STOCK_ASSET.COMPANY_NAME, STOCK_ASSET.QUANTITY, STOCK_ASSET.AMOUNT AS STOCK_AMOUNT,
IMMOVABLE_MOVABLE_ASSET.TYPE, IMMOVABLE_MOVABLE_ASSET.LOCATION, IMMOVABLE_MOVABLE_ASSET.AMOUNT
FROM BANK_ASSET INNER JOIN INSURANCE_ASSET ON BANK_ASSET.USER_ID = INSURANCE_ASSET.USER_ID
INNER JOIN 401K_ASSET ON INSURANCE_ASSET.USER_ID =  401K_ASSET.USER_ID
INNER JOIN STOCK_ASSET ON 401K_ASSET.USER_ID = STOCK_ASSET.USER_ID 
INNER JOIN IMMOVABLE_MOVABLE_ASSET ON STOCK_ASSET.USER_ID =  IMMOVABLE_MOVABLE_ASSET.USER_ID) 
AS ASSET_TABLE WHERE USER_ID = 1002;


/* 3. Displaying the user’s total debt for a month*/

SELECT SUM(AMOUNT) AS DEBT_AMOUNT FROM 
(SELECT USER_ID, AMOUNT FROM MORTGAGE UNION ALL
SELECT USER_ID, AMOUNT FROM LOAN UNION ALL 
SELECT USER_ID, AMOUNT FROM CREDIT_CARD UNION ALL
SELECT USER_ID, AMOUNT_PER_YEAR / 12 AS AMOUNT FROM TAXES_BILLS) AS DEBT_TABLE
WHERE DEBT_TABLE.USER_ID = 1001;

/* 4. Displaying a detailed view of the user’s debts and more information about them */

SELECT * FROM 
(SELECT MORTGAGE.USER_ID , MORTGAGE.AMOUNT AS MORTGAGE_AMOUNT,
LOAN.TYPE AS LOAN_TYPE, LOAN.LOAN_PROVIDER, LOAN.AMOUNT AS LOAN_AMOUNT,
CREDIT_CARD.CREDIT_CARD_NO, CREDIT_CARD.COMPANY, CREDIT_CARD.AMOUNT AS CREDIT_CARD_AMOUNT,
TAXES_BILLS.TAX_ID, TAXES_BILLS.TYPE AS TAX_TYPE, TAXES_BILLS.AMOUNT_PER_YEAR
FROM MORTGAGE INNER JOIN LOAN ON MORTGAGE.USER_ID = LOAN.USER_ID
INNER JOIN CREDIT_CARD ON LOAN.USER_ID = CREDIT_CARD.USER_ID
INNER JOIN TAXES_BILLS ON CREDIT_CARD.USER_ID = TAXES_BILLS.USER_ID) AS DEBT_TABLE 
WHERE DEBT_TABLE.USER_ID = 1001; 


/* STORED PROCEDURES */
-- FETCH THE TOTAL INCOME BASED ON USED ID
DELIMITER //  
DROP PROCEDURE IF EXISTS GetUserDetailsFromID //
CREATE PROCEDURE GetUserDetailsFromID (
		IN Id INT
        )
BEGIN
			SELECT  
				 CONCAT(U.FIRST_NAME," ",U.LAST_NAME) AS 'User Name',
				 SUM(BA.AMOUNT + IA.AMOUNT + KA.AMOUNT + SA.AMOUNT +IMA.AMOUNT) As 'Total Assets',
				 SUM(M.AMOUNT + L.AMOUNT + CC.AMOUNT ) As 'Total Debts'
			 FROM `USER` U JOIN BANK_ASSET BA ON U.User_Id = BA.User_Id
			 JOIN INSURANCE_ASSET IA ON U.User_Id = IA.User_Id
			 JOIN 401K_ASSET KA ON U.User_Id = KA.User_Id
			 JOIN STOCK_ASSET SA ON U.User_Id = SA.User_Id
			 JOIN IMMOVABLE_MOVABLE_ASSET IMA ON U.User_Id = IMA.User_Id
			 JOIN MORTGAGE M ON U.User_Id = M.User_Id
			 JOIN LOAN L ON U.User_Id = L.User_Id
			 JOIN CREDIT_CARD CC ON U.User_Id = CC.User_Id
			  WHERE U.User_Id = Id;
END //
DELIMITER ;

CALL GetUserDetailsFromID(1002);

-- INSERT USER DETAILS 
DELIMITER //  
DROP PROCEDURE IF EXISTS CreateNewUser //
CREATE PROCEDURE CreateNewUser (
		 firstName varchar(50) ,
         lastName varchar(50),
         emailId varchar(50),
         contact varchar(12),
         accountNo VARCHAR(20) ,
		 accountType VARCHAR(20),
		 branch VARCHAR(20),
		 bankAmount DECIMAL(25,2),
         mortgageAmount DECIMAL(25,2)
        )
BEGIN
			INSERT INTO USER ( FIRST_NAME, LAST_NAME, EMAIL_ID, CONTACT)
			VALUES (firstName,lastName,emailId,contact);
            INSERT INTO BANK_ASSET (USER_ID, ACCOUNT_NO, TYPE, BRANCH, AMOUNT)
			VALUES (LAST_INSERT_ID(),accountNo, accountType,branch,bankAmount);
            INSERT INTO MORTGAGE ( USER_ID, AMOUNT)
			VALUES (LAST_INSERT_ID(), mortgageAmount);
END //
DELIMITER ;

CALL CreateNewUser('Damon','Salvatore','damonsalvatore@gmail.com','8476389444',
				   '800100400100','Savings','Mystics Falls','300300','40000');

-- TRIGGERS
DROP TRIGGER IF EXISTS `wealthManagement`.`BANK_ASSET_BEFORE_DELETE`;
DELIMITER $$
USE `wealthManagement`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wealthManagement`.`BANK_ASSET_BEFORE_DELETE` BEFORE DELETE ON `BANK_ASSET` FOR EACH ROW
BEGIN
SET @bank_ac_count = 0;
select count(*) into @bank_ac_count
from BANK_ASSET
where user_id = OLD.user_id;
if @bank_ac_count = 1 then
signal sqlstate '45000'
set message_text = 'Please add another bank account before deleting lone bank account';
end if;
END
$$
DELIMITER ;